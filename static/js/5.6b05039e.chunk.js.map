{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","_x2","_x3","_x4","apply","arguments","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","_args","length","undefined","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","char","description","limitDescr","checkDescr","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComic","_ref4","_callee4","_context4","_transformComics","getAllComics","_ref5","_callee5","_args5","_context5","title","price","prices","pageCount","language","textObjects","descr","slice","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","key","value","errorInfo","console","log","this","setState","props","children","Component","View","imgStyle","_jsxs","className","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","disabled","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","TransitionGroup","component","renderItems","Skeleton","_Fragment","CharInfo","charId","skeleton","CharSearchForm","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/5.6b05039e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.5bfd7105.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{\r\n                display: 'block',\r\n                width: \"250px\",\r\n                height: \"250px\",\r\n                objectFit: \"contain\",\r\n                margin: \"0 auto\"\r\n            }} \r\n            src={img}\r\n            alt='Error' \r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n          _apiKey = 'apikey=1d5cd1c31c3cb686a9f38fbb57e3023b',\r\n          _baseOffsetForHeroes = 210,\r\n          _baseOffsetForComics = 50;\r\n\r\n    const getAllCharacters = async (offset = _baseOffsetForHeroes) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: limitDescr(checkDescr(char.description)),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetForComics) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformComics)\r\n        \r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price ? comics.prices[0].price + '$' : 'No price',\r\n            pageCount: comics.pageCount ? comics.pageCount + ' pages' : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const checkDescr = (descr) => {\r\n        if (descr !== '') {\r\n            return descr\r\n        } else {\r\n            return 'There is no description'\r\n        }\r\n    }\r\n\r\n    const limitDescr = (descr) => {\r\n        const maxLength = 210;\r\n\r\n        if (descr.length > maxLength) {\r\n            const description = descr.slice(0, maxLength) + '...';\r\n            return description;\r\n        } else {\r\n            return descr;\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method, body, headers) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); //конструируем новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true}\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({});\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar} \n                    disabled={loading}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1155);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/> \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}