{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","_x2","_x3","_x4","apply","arguments","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","_args","length","undefined","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","char","description","limitDescr","checkDescr","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComic","_ref4","_callee4","_context4","_transformComics","getAllComics","_ref5","_callee5","_args5","_context5","title","price","prices","pageCount","language","textObjects","descr","slice","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","key","value","errorInfo","console","log","this","setState","props","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","disabled","mjolnir","CharList","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","TransitionGroup","component","renderItems","CharInfo","charId","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.e86d24b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.5bfd7105.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{\r\n                display: 'block',\r\n                width: \"250px\",\r\n                height: \"250px\",\r\n                objectFit: \"contain\",\r\n                margin: \"0 auto\"\r\n            }} \r\n            src={img}\r\n            alt='Error' \r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n          _apiKey = 'apikey=1d5cd1c31c3cb686a9f38fbb57e3023b',\r\n          _baseOffsetForHeroes = 210,\r\n          _baseOffsetForComics = 50;\r\n\r\n    const getAllCharacters = async (offset = _baseOffsetForHeroes) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: limitDescr(checkDescr(char.description)),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetForComics) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformComics)\r\n        \r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price ? comics.prices[0].price + '$' : 'No price',\r\n            pageCount: comics.pageCount ? comics.pageCount + ' pages' : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const checkDescr = (descr) => {\r\n        if (descr !== '') {\r\n            return descr\r\n        } else {\r\n            return 'There is no description'\r\n        }\r\n    }\r\n\r\n    const limitDescr = (descr) => {\r\n        const maxLength = 210;\r\n\r\n        if (descr.length > maxLength) {\r\n            const description = descr.slice(0, maxLength) + '...';\r\n            return description;\r\n        } else {\r\n            return descr;\r\n        }\r\n    }\r\n\r\n    return {\r\n            clearError, \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic\r\n        }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method, body, headers) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); //конструируем новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            return data;\r\n\r\n        } catch(e) {\r\n\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error': \r\n            return <ErrorMessage/>\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true}\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({});\n    \n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error) ? <View char={char}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar} \n                    disabled={process === 'loading'}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error': \n            return <ErrorMessage/>\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1155);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        //eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        console.log('render')\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // Конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n        //eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        //eslint-disable-next-line\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    // const skeleton = char || loading || error ? null : <Skeleton/> \n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\"\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}