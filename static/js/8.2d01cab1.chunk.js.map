{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","_x2","_x3","_x4","apply","arguments","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","_args","length","undefined","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","char","description","limitDescr","checkDescr","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComic","_ref4","_callee4","_context4","_transformComics","getAllComics","_ref5","_callee5","_args5","_context5","title","price","prices","pageCount","language","textObjects","descr","slice","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","AppBanner","avengers","avengersLogo","SinglePage","dataType","useParams","setData","_useMarvelService","useEffect","updateData","then","onDataLoaded"],"mappings":"iGAAe,UAA0B,kC,OCkB1BA,IAhBM,WACjB,OACIC,cAAA,OACIC,MAAO,CACHC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,UAEZC,IAAKC,EACLC,IAAI,Y,yECkFDC,IA7FU,WACrB,IAAAC,ECDmB,WAEnB,IAAAC,EAA8BC,mBAAS,WAAUC,EAAAC,YAAAH,EAAA,GAA1CI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GA8B1B,MAAO,CAACI,QA5BQC,sBAAW,eAAAC,EAAAC,YAAAC,IAAAC,MAAC,SAAAC,EAAOC,EAAKC,EAAQC,EAAMC,GAAO,IAAAC,EAAAC,EAAA,OAAAR,IAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEnC,OAAtBjB,EAAW,WAAWe,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGKC,MAAMV,EAAK,CAACC,SAAQC,OAAMC,YAAU,KAAD,EAA5C,IAARC,EAAQG,EAAAI,MAEAC,GAAG,CAADL,EAAAE,KAAA,cACN,IAAII,MAAM,mBAADC,OAAoBd,EAAG,cAAAc,OAAaV,EAASW,SAAU,KAAD,SAAAR,EAAAE,KAAA,EAGtDL,EAASY,OAAO,KAAD,EAAxB,OAAJX,EAAIE,EAAAI,KAAAJ,EAAAU,OAAA,SAEHZ,GAAI,QAIQ,MAJRE,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAIXf,EAAW,SAAQe,EAAAW,GAAA,yBAAAX,EAAAY,UAAApB,EAAA,mBAI1B,gBAAAqB,EAAAC,EAAAC,EAAAC,GAAA,OAAA5B,EAAA6B,MAAA,KAAAC,YArB0B,GAqBxB,IAOcC,WALEhC,uBAAY,WAE3BF,EAAW,aACZ,IAE0BD,UAASC,cD/BamC,GAA5ClC,EAAOP,EAAPO,QAASiC,EAAUxC,EAAVwC,WAAYnC,EAAOL,EAAPK,QAASC,EAAUN,EAAVM,WAE/BoC,EAAW,4CACXC,EAAU,0CAIVC,EAAgB,eAAAnC,EAAAC,YAAAC,IAAAC,MAAG,SAAAC,IAAA,IAAAgC,EAAAC,EAAAC,EAAAR,UAAA,OAAA5B,IAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAoC,OAA7BsB,EAAME,EAAAC,OAAA,QAAAC,IAAAF,EAAA,GAAAA,EAAA,GAHT,IAGgC1B,EAAAE,KAAA,EACvChB,EAAQ,GAADqB,OAAIc,EAAQ,8BAAAd,OAA6BiB,EAAM,KAAAjB,OAAIe,GAAW,MAAO,KAAM,CAAC,eAAgB,qBAAqB,KAAD,EAAhI,OAAHG,EAAGzB,EAAAI,KAAAJ,EAAAU,OAAA,SACFe,EAAI3B,KAAK+B,QAAQC,IAAIC,IAAoB,wBAAA/B,EAAAY,UAAApB,OACnD,kBAHqB,OAAAJ,EAAA6B,MAAA,KAAAC,YAAA,GAKhBc,EAAkB,eAAAC,EAAA5C,YAAAC,IAAAC,MAAG,SAAA2C,EAAOC,GAAI,IAAAV,EAAA,OAAAnC,IAAAS,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAlC,KAAA,EAChBhB,EAAQ,GAADqB,OAAIc,EAAQ,oBAAAd,OAAmB4B,EAAI,KAAA5B,OAAIe,IAAW,KAAD,EAAjE,OAAHG,EAAGW,EAAAhC,KAAAgC,EAAA1B,OAAA,SACFe,EAAI3B,KAAK+B,QAAQC,IAAIC,IAAoB,wBAAAK,EAAAxB,UAAAsB,OACnD,gBAHuBrB,GAAA,OAAAoB,EAAAhB,MAAA,KAAAC,YAAA,GAKlBmB,EAAY,eAAAC,EAAAjD,YAAAC,IAAAC,MAAG,SAAAgD,EAAOC,GAAE,IAAAf,EAAA,OAAAnC,IAAAS,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAvC,KAAA,EACRhB,EAAQ,GAADqB,OAAIc,EAAQ,eAAAd,OAAciC,EAAE,KAAAjC,OAAIe,GAAW,MAAO,KAAM,CAAC,eAAgB,qBAAqB,KAAD,EAA7G,OAAHG,EAAGgB,EAAArC,KAAAqC,EAAA/B,OAAA,SACFqB,EAAoBN,EAAI3B,KAAK+B,QAAQ,KAAG,wBAAAY,EAAA7B,UAAA2B,OAClD,gBAHiBzB,GAAA,OAAAwB,EAAArB,MAAA,KAAAC,YAAA,GAKZa,EAAsB,SAACW,GAEzB,MAAO,CACHF,GAAIE,EAAKF,GACTL,KAAMO,EAAKP,KACXQ,YAAaC,EAAWC,EAAWH,EAAKC,cACxCG,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAGzD,IACvB0D,KAAMT,EAAKQ,KAAK,GAAGzD,IACnB2D,OAAQV,EAAKU,OAAOC,QAItBC,EAAQ,eAAAC,EAAAlE,YAAAC,IAAAC,MAAG,SAAAiE,EAAOhB,GAAE,IAAAf,EAAA,OAAAnC,IAAAS,MAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAAAuD,EAAAvD,KAAA,EACJhB,EAAQ,GAADqB,OAAIc,EAAQ,WAAAd,OAAUiC,EAAE,KAAAjC,OAAIe,GAAW,MAAO,KAAM,CAAC,eAAgB,qBAAqB,KAAD,EAAzG,OAAHG,EAAGgC,EAAArD,KAAAqD,EAAA/C,OAAA,SACFgD,EAAiBjC,EAAI3B,KAAK+B,QAAQ,KAAG,wBAAA4B,EAAA7C,UAAA4C,OAC/C,gBAHazC,GAAA,OAAAwC,EAAAtC,MAAA,KAAAC,YAAA,GAKRyC,EAAY,eAAAC,EAAAvE,YAAAC,IAAAC,MAAG,SAAAsE,IAAA,IAAArC,EAAAC,EAAAqC,EAAA5C,UAAA,OAAA5B,IAAAS,MAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,OAAoC,OAA7BsB,EAAMsC,EAAAnC,OAAA,QAAAC,IAAAkC,EAAA,GAAAA,EAAA,GAnCL,GAmC4BC,EAAA7D,KAAA,EACnChB,EAAQ,GAADqB,OAAIc,EAAQ,0BAAAd,OAAyBiB,EAAM,KAAAjB,OAAIe,GAAW,MAAO,KAAM,CAAC,eAAgB,qBAAqB,KAAD,EAA5H,OAAHG,EAAGsC,EAAA3D,KAAA2D,EAAArD,OAAA,SACFe,EAAI3B,KAAK+B,QAAQC,IAAI4B,IAAiB,wBAAAK,EAAAnD,UAAAiD,OAEhD,kBAJiB,OAAAD,EAAA3C,MAAA,KAAAC,YAAA,GAMZwC,EAAmB,SAACN,GAGtB,MAAO,CACHZ,GAAIY,EAAOZ,GACXL,KAAMiB,EAAOY,MACbrB,YAAaS,EAAOT,aAAe,0BACnCG,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DC,SAAUG,EAAOF,KAAK,GAAGzD,IACzBwE,MAAOb,EAAOc,OAAO,GAAGD,MAAQb,EAAOc,OAAO,GAAGD,MAAQ,IAAM,WAC/DE,UAAWf,EAAOe,UAAYf,EAAOe,UAAY,SAAW,2CAC5DC,SAAUhB,EAAOiB,YAAYD,UAAY,UAI3CvB,EAAa,SAACyB,GAChB,MAAc,KAAVA,EACOA,EAEA,2BAIT1B,EAAa,SAAC0B,GAGhB,OAAIA,EAAM3C,OAFQ,IAGM2C,EAAMC,MAAM,EAHlB,KAGkC,MAGzCD,GAIf,MAAO,CACCnD,aACAnC,UACAC,aACAsC,mBACAS,qBACAK,eACAsB,eACAL,c,mEExEGkB,EAjBE,WACb,OACIC,eAAAC,WAAA,CAAAC,SAAA,CACI3G,cAAA,KAAG4G,UAAU,eAAcD,SAAC,iDAC5BF,eAAA,OAAKG,UAAU,WAAUD,SAAA,CACrBF,eAAA,OAAKG,UAAU,yBAAwBD,SAAA,CACnC3G,cAAA,OAAK4G,UAAU,2BACf5G,cAAA,OAAK4G,UAAU,4BAEnB5G,cAAA,OAAK4G,UAAU,0BACf5G,cAAA,OAAK4G,UAAU,0BACf5G,cAAA,OAAK4G,UAAU,iCCWhBC,IAnBI,SAAC7F,EAAS8F,EAAWhF,GACpC,OAAQd,GACJ,IAAK,UACD,OAAOhB,cAACwG,EAAQ,IAEpB,IAAK,UACD,OAAOxG,cAAC+G,IAAO,IAEnB,IAAK,YACD,OAAO/G,cAAC8G,EAAS,CAAChF,KAAMA,IAE5B,IAAK,QACD,OAAO9B,cAACD,IAAY,IAExB,QACI,MAAM,IAAIuC,MAAM,+B,oFCpBb,MAA0B,qCCA1B,MAA0B,0C,OCiB1B0E,IAbG,WACd,OACIP,eAAA,OAAKG,UAAU,cAAaD,SAAA,CACxB3G,cAAA,OAAKO,IAAK0G,EAAUxG,IAAI,aACxBgG,eAAA,OAAKG,UAAU,mBAAkBD,SAAA,CAAC,yBACR3G,cAAA,SAAK,iBAG/BA,cAAA,OAAKO,IAAK2G,EAAczG,IAAI,uB,+FCwCzB0G,UAzCI,SAAH/F,GAA+B,IAA1B0F,EAAS1F,EAAT0F,UAAWM,EAAQhG,EAARgG,SACjB5C,EAAM6C,cAAN7C,GACP5D,EAAwBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA/BkB,EAAIhB,EAAA,GAAEwG,EAAOxG,EAAA,GACpByG,EAAkE7G,cAA3D4E,EAAQiC,EAARjC,SAAUjB,EAAYkD,EAAZlD,aAAclB,EAAUoE,EAAVpE,WAAYnC,EAAOuG,EAAPvG,QAASC,EAAUsG,EAAVtG,WAEpDuG,qBAAU,WACNC,MACD,CAACjD,IAEJ,IAAMiD,EAAa,WAGf,OAFAtE,IAEQiE,GACJ,IAAK,QACD9B,EAASd,GAAIkD,KAAKC,GAAcD,MAAK,kBAAMzG,EAAW,gBACtD,MACJ,IAAK,YACDoD,EAAaG,GAAIkD,KAAKC,GAAcD,MAAK,kBAAMzG,EAAW,gBAC1D,MACJ,QACI,MAAM,IAAIqB,MAAM,8BAItBqF,EAAe,SAAC7F,GAClBwF,EAAQxF,IAOZ,OACI2E,eAAAC,WAAA,CAAAC,SAAA,CACI3G,cAACgH,IAAS,IAETH,YAAW7F,EAAS8F,EAAWhF","file":"static/js/8.2d01cab1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.5bfd7105.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{\r\n                display: 'block',\r\n                width: \"250px\",\r\n                height: \"250px\",\r\n                objectFit: \"contain\",\r\n                margin: \"0 auto\"\r\n            }} \r\n            src={img}\r\n            alt='Error' \r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n          _apiKey = 'apikey=1d5cd1c31c3cb686a9f38fbb57e3023b',\r\n          _baseOffsetForHeroes = 210,\r\n          _baseOffsetForComics = 50;\r\n\r\n    const getAllCharacters = async (offset = _baseOffsetForHeroes) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: limitDescr(checkDescr(char.description)),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetForComics) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformComics)\r\n        \r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price ? comics.prices[0].price + '$' : 'No price',\r\n            pageCount: comics.pageCount ? comics.pageCount + ' pages' : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const checkDescr = (descr) => {\r\n        if (descr !== '') {\r\n            return descr\r\n        } else {\r\n            return 'There is no description'\r\n        }\r\n    }\r\n\r\n    const limitDescr = (descr) => {\r\n        const maxLength = 210;\r\n\r\n        if (descr.length > maxLength) {\r\n            const description = descr.slice(0, maxLength) + '...';\r\n            return description;\r\n        } else {\r\n            return descr;\r\n        }\r\n    }\r\n\r\n    return {\r\n            clearError, \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic\r\n        }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method, body, headers) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); //конструируем новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            return data;\r\n\r\n        } catch(e) {\r\n\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n            break;\r\n        case 'error': \r\n            return <ErrorMessage/>\r\n            break;\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport setContent from '../../utils/setContent';\r\n\r\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\r\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\r\n// А если вынесем их все в App.js - то они будут одни на все страницы\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n        const {id} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n        useEffect(() => {\r\n            updateData()\r\n        }, [id])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n\r\n            switch (dataType) {\r\n                case 'comic':\r\n                    getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n                    break;\r\n                case 'character':\r\n                    getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n                    break;\r\n                default: \r\n                    throw new Error('Unexpected process state');\r\n            }\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        // const errorMessage = error ? <ErrorMessage/> : null;\r\n        // const spinner = loading ? <Spinner/> : null;\r\n        // const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n\r\n        return (\r\n            <>\r\n                <AppBanner/>\r\n                \r\n                {setContent(process, Component, data)}\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SinglePage;"],"sourceRoot":""}