{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","_x2","_x3","_x4","apply","arguments","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","_args","length","undefined","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","char","name","description","limitDescr","checkDescr","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComic","_ref3","_callee3","_context3","_transformComics","getAllComics","_ref4","_callee4","_args4","_context4","title","price","prices","pageCount","language","textObjects","descr","slice","View","comic","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","_useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/5.dfb45171.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.5bfd7105.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{\r\n                display: 'block',\r\n                width: \"250px\",\r\n                height: \"250px\",\r\n                objectFit: \"contain\",\r\n                margin: \"0 auto\"\r\n            }} \r\n            src={img}\r\n            alt='Error' \r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n          _apiKey = 'apikey=1d5cd1c31c3cb686a9f38fbb57e3023b',\r\n          _baseOffsetForHeroes = 210,\r\n          _baseOffsetForComics = 50;\r\n\r\n    const getAllCharacters = async (offset = _baseOffsetForHeroes) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: limitDescr(checkDescr(char.description)),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetForComics) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformComics)\r\n        \r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price ? comics.prices[0].price + '$' : 'No price',\r\n            pageCount: comics.pageCount ? comics.pageCount + ' pages' : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const checkDescr = (descr) => {\r\n        if (descr !== '') {\r\n            return descr\r\n        } else {\r\n            return 'There is no description'\r\n        }\r\n    }\r\n\r\n    const limitDescr = (descr) => {\r\n        const maxLength = 210;\r\n\r\n        if (descr.length > maxLength) {\r\n            const description = descr.slice(0, maxLength) + '...';\r\n            return description;\r\n        } else {\r\n            return descr;\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method, body, headers) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); //конструируем новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId]);\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {name, description, thumbnail, price, pageCount, language} = comic\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={name} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{name}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}