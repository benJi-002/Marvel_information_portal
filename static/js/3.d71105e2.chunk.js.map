{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","_x2","_x3","_x4","apply","arguments","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","_args","length","undefined","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","char","name","description","limitDescr","checkDescr","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComic","_ref3","_callee3","_context3","_transformComics","getAllComics","_ref4","_callee4","_args4","_context4","title","price","prices","pageCount","language","textObjects","descr","slice","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","key","value","errorInfo","console","log","this","setState","props","children","Component","View","imgStyle","_jsxs","className","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","disabled","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","renderItems","Skeleton","_Fragment","CharInfo","charId","skeleton","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.d71105e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.5bfd7105.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n            style={{\r\n                display: 'block',\r\n                width: \"250px\",\r\n                height: \"250px\",\r\n                objectFit: \"contain\",\r\n                margin: \"0 auto\"\r\n            }} \r\n            src={img}\r\n            alt='Error' \r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n          _apiKey = 'apikey=1d5cd1c31c3cb686a9f38fbb57e3023b',\r\n          _baseOffsetForHeroes = 210,\r\n          _baseOffsetForComics = 50;\r\n\r\n    const getAllCharacters = async (offset = _baseOffsetForHeroes) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: limitDescr(checkDescr(char.description)),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetForComics) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`, 'GET', null, {'Content-Type': 'application/json'});\r\n        return res.data.results.map(_transformComics)\r\n        \r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price ? comics.prices[0].price + '$' : 'No price',\r\n            pageCount: comics.pageCount ? comics.pageCount + ' pages' : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const checkDescr = (descr) => {\r\n        if (descr !== '') {\r\n            return descr\r\n        } else {\r\n            return 'There is no description'\r\n        }\r\n    }\r\n\r\n    const limitDescr = (descr) => {\r\n        const maxLength = 210;\r\n\r\n        if (descr.length > maxLength) {\r\n            const description = descr.slice(0, maxLength) + '...';\r\n            return description;\r\n        } else {\r\n            return descr;\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method, body, headers) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); //конструируем новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true}\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({});\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar} \n                    disabled={loading}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1155);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/> \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}